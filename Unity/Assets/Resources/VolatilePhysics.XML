<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VolatilePhysics</name>
    </assembly>
    <members>
        <member name="T:Volatile.FP">
            <summary>
            Represents a Q31.32 fixed-point number.
            </summary>
        </member>
        <member name="F:Volatile.FP.Pi">
            <summary>
            The value of Pi
            </summary>
        </member>
        <member name="M:Volatile.FP.Sign(Volatile.FP)">
            <summary>
            Returns a number indicating the sign of a Fix64 number.
            Returns 1 if the value is positive, 0 if is 0, and -1 if it is negative.
            </summary>
        </member>
        <member name="M:Volatile.FP.Abs(Volatile.FP)">
            <summary>
            Returns the absolute value of a Fix64 number.
            Note: Abs(Fix64.MinValue) == Fix64.MaxValue.
            </summary>
        </member>
        <member name="M:Volatile.FP.FastAbs(Volatile.FP)">
            <summary>
            Returns the absolute value of a Fix64 number.
            FastAbs(Fix64.MinValue) is undefined.
            </summary>
        </member>
        <member name="M:Volatile.FP.Floor(Volatile.FP)">
            <summary>
            Returns the largest integer less than or equal to the specified number.
            </summary>
        </member>
        <member name="M:Volatile.FP.Ceiling(Volatile.FP)">
            <summary>
            Returns the smallest integral value that is greater than or equal to the specified number.
            </summary>
        </member>
        <member name="M:Volatile.FP.Round(Volatile.FP)">
            <summary>
            Rounds a value to the nearest integral value.
            If the value is halfway between an even and an uneven value, returns the even value.
            </summary>
        </member>
        <member name="M:Volatile.FP.op_Addition(Volatile.FP,Volatile.FP)">
            <summary>
            Adds x and y. Performs saturating addition, i.e. in case of overflow, 
            rounds to MinValue or MaxValue depending on sign of operands.
            </summary>
        </member>
        <member name="M:Volatile.FP.OverflowAdd(Volatile.FP,Volatile.FP)">
            <summary>
            Adds x and y performing overflow checking. Should be inlined by the CLR.
            </summary>
        </member>
        <member name="M:Volatile.FP.FastAdd(Volatile.FP,Volatile.FP)">
            <summary>
            Adds x and y witout performing overflow checking. Should be inlined by the CLR.
            </summary>
        </member>
        <member name="M:Volatile.FP.op_Subtraction(Volatile.FP,Volatile.FP)">
            <summary>
            Subtracts y from x. Performs saturating substraction, i.e. in case of overflow, 
            rounds to MinValue or MaxValue depending on sign of operands.
            </summary>
        </member>
        <member name="M:Volatile.FP.OverflowSub(Volatile.FP,Volatile.FP)">
            <summary>
            Subtracts y from x witout performing overflow checking. Should be inlined by the CLR.
            </summary>
        </member>
        <member name="M:Volatile.FP.FastSub(Volatile.FP,Volatile.FP)">
            <summary>
            Subtracts y from x witout performing overflow checking. Should be inlined by the CLR.
            </summary>
        </member>
        <member name="M:Volatile.FP.OverflowMul(Volatile.FP,Volatile.FP)">
            <summary>
            Performs multiplication without checking for overflow.
            Useful for performance-critical code where the values are guaranteed not to cause overflow
            </summary>
        </member>
        <member name="M:Volatile.FP.FastMul(Volatile.FP,Volatile.FP)">
            <summary>
            Performs multiplication without checking for overflow.
            Useful for performance-critical code where the values are guaranteed not to cause overflow
            </summary>
        </member>
        <member name="M:Volatile.FP.FastMod(Volatile.FP,Volatile.FP)">
            <summary>
            Performs modulo as fast as possible; throws if x == MinValue and y == -1.
            Use the operator (%) for a more reliable but slower modulo.
            </summary>
        </member>
        <member name="M:Volatile.FP.Sqrt(Volatile.FP)">
            <summary>
            Returns the square root of a specified number.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The argument was negative.
            </exception>
        </member>
        <member name="M:Volatile.FP.Sin(Volatile.FP)">
            <summary>
            Returns the Sine of x.
            This function has about 9 decimals of accuracy for small values of x.
            It may lose accuracy as the value of x grows.
            Performance: about 25% slower than Math.Sin() in x64, and 200% slower in x86.
            </summary>
        </member>
        <member name="M:Volatile.FP.FastSin(Volatile.FP)">
            <summary>
            Returns a rough approximation of the Sine of x.
            This is at least 3 times faster than Sin() on x86 and slightly faster than Math.Sin(),
            however its accuracy is limited to 4-5 decimals, for small enough values of x.
            </summary>
        </member>
        <member name="M:Volatile.FP.Cos(Volatile.FP)">
            <summary>
            Returns the cosine of x.
            See Sin() for more details.
            </summary>
        </member>
        <member name="M:Volatile.FP.FastCos(Volatile.FP)">
            <summary>
            Returns a rough approximation of the cosine of x.
            See FastSin for more details.
            </summary>
        </member>
        <member name="M:Volatile.FP.Tan(Volatile.FP)">
            <summary>
            Returns the tangent of x.
            </summary>
            <remarks>
            This function is not well-tested. It may be wildly inaccurate.
            </remarks>
        </member>
        <member name="P:Volatile.FP.RawValue">
            <summary>
            The underlying integer representation
            </summary>
        </member>
        <member name="M:Volatile.FP.#ctor(System.Int64)">
            <summary>
            This is the constructor from raw value; it can only be used interally.
            </summary>
            <param name="rawValue"></param>
        </member>
        <member name="T:Volatile.TSMath">
            <summary>
            Contains common math operations.
            </summary>
        </member>
        <member name="F:Volatile.TSMath.Pi">
            <summary>
            PI constant.
            </summary>
        </member>
        <member name="F:Volatile.TSMath.PiOver2">
              @brief PI over 2 constant.
            
        </member>
        <member name="F:Volatile.TSMath.Epsilon">
            <summary>
            A small value often used to decide if numeric 
            results are zero.
            </summary>
        </member>
        <member name="F:Volatile.TSMath.Deg2Rad">
              @brief Degree to radians constant.
            
        </member>
        <member name="F:Volatile.TSMath.Rad2Deg">
              @brief Radians to degree constant.
            
        </member>
        <member name="M:Volatile.TSMath.Sqrt(Volatile.FP)">
            <summary>
            Gets the square root.
            </summary>
            <param name="number">The number to get the square root from.</param>
            <returns></returns>
        </member>
        <member name="M:Volatile.TSMath.Max(Volatile.FP,Volatile.FP)">
            <summary>
            Gets the maximum number of two values.
            </summary>
            <param name="val1">The first value.</param>
            <param name="val2">The second value.</param>
            <returns>Returns the largest value.</returns>
        </member>
        <member name="M:Volatile.TSMath.Min(Volatile.FP,Volatile.FP)">
            <summary>
            Gets the minimum number of two values.
            </summary>
            <param name="val1">The first value.</param>
            <param name="val2">The second value.</param>
            <returns>Returns the smallest value.</returns>
        </member>
        <member name="M:Volatile.TSMath.Max(Volatile.FP,Volatile.FP,Volatile.FP)">
            <summary>
            Gets the maximum number of three values.
            </summary>
            <param name="val1">The first value.</param>
            <param name="val2">The second value.</param>
            <param name="val3">The third value.</param>
            <returns>Returns the largest value.</returns>
        </member>
        <member name="M:Volatile.TSMath.Clamp(Volatile.FP,Volatile.FP,Volatile.FP)">
            <summary>
            Returns a number which is within [min,max]
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Volatile.TSMath.Absolute(Volatile.TSMatrix@,Volatile.TSMatrix@)">
            <summary>
            Changes every sign of the matrix entry to '+'
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="result">The absolute matrix.</param>
        </member>
        <member name="M:Volatile.TSMath.Sin(Volatile.FP)">
            <summary>
            Returns the sine of value.
            </summary>
        </member>
        <member name="M:Volatile.TSMath.Cos(Volatile.FP)">
            <summary>
            Returns the cosine of value.
            </summary>
        </member>
        <member name="M:Volatile.TSMath.Tan(Volatile.FP)">
            <summary>
            Returns the tan of value.
            </summary>
        </member>
        <member name="M:Volatile.TSMath.Asin(Volatile.FP)">
            <summary>
            Returns the arc sine of value.
            </summary>
        </member>
        <member name="M:Volatile.TSMath.Acos(Volatile.FP)">
            <summary>
            Returns the arc cosine of value.
            </summary>
        </member>
        <member name="M:Volatile.TSMath.Atan(Volatile.FP)">
            <summary>
            Returns the arc tan of value.
            </summary>
        </member>
        <member name="M:Volatile.TSMath.Atan2(Volatile.FP,Volatile.FP)">
            <summary>
            Returns the arc tan of coordinates x-y.
            </summary>
        </member>
        <member name="M:Volatile.TSMath.Floor(Volatile.FP)">
            <summary>
            Returns the largest integer less than or equal to the specified number.
            </summary>
        </member>
        <member name="M:Volatile.TSMath.Ceiling(Volatile.FP)">
            <summary>
            Returns the smallest integral value that is greater than or equal to the specified number.
            </summary>
        </member>
        <member name="M:Volatile.TSMath.Round(Volatile.FP)">
            <summary>
            Rounds a value to the nearest integral value.
            If the value is halfway between an even and an uneven value, returns the even value.
            </summary>
        </member>
        <member name="M:Volatile.TSMath.Sign(Volatile.FP)">
            <summary>
            Returns a number indicating the sign of a Fix64 number.
            Returns 1 if the value is positive, 0 if is 0, and -1 if it is negative.
            </summary>
        </member>
        <member name="M:Volatile.TSMath.Abs(Volatile.FP)">
            <summary>
            Returns the absolute value of a Fix64 number.
            Note: Abs(Fix64.MinValue) == Fix64.MaxValue.
            </summary>
        </member>
        <member name="T:Volatile.TSMatrix">
            <summary>
            3x3 Matrix.
            </summary>
        </member>
        <member name="F:Volatile.TSMatrix.M11">
            <summary>
            M11
            </summary>
        </member>
        <member name="F:Volatile.TSMatrix.M12">
            <summary>
            M12
            </summary>
        </member>
        <member name="F:Volatile.TSMatrix.M13">
            <summary>
            M13
            </summary>
        </member>
        <member name="F:Volatile.TSMatrix.M21">
            <summary>
            M21
            </summary>
        </member>
        <member name="F:Volatile.TSMatrix.M22">
            <summary>
            M22
            </summary>
        </member>
        <member name="F:Volatile.TSMatrix.M23">
            <summary>
            M23
            </summary>
        </member>
        <member name="F:Volatile.TSMatrix.M31">
            <summary>
            M31
            </summary>
        </member>
        <member name="F:Volatile.TSMatrix.M32">
            <summary>
            M32
            </summary>
        </member>
        <member name="F:Volatile.TSMatrix.M33">
            <summary>
            M33
            </summary>
        </member>
        <member name="F:Volatile.TSMatrix.Identity">
            <summary>
            Identity matrix.
            </summary>
        </member>
        <member name="M:Volatile.TSMatrix.#ctor(Volatile.FP,Volatile.FP,Volatile.FP,Volatile.FP,Volatile.FP,Volatile.FP,Volatile.FP,Volatile.FP,Volatile.FP)">
            <summary>
            Initializes a new instance of the matrix structure.
            </summary>
            <param name="m11">m11</param>
            <param name="m12">m12</param>
            <param name="m13">m13</param>
            <param name="m21">m21</param>
            <param name="m22">m22</param>
            <param name="m23">m23</param>
            <param name="m31">m31</param>
            <param name="m32">m32</param>
            <param name="m33">m33</param>
        </member>
        <member name="M:Volatile.TSMatrix.Multiply(Volatile.TSMatrix,Volatile.TSMatrix)">
            <summary>
            Multiply two matrices. Notice: matrix multiplication is not commutative.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>The product of both matrices.</returns>
        </member>
        <member name="M:Volatile.TSMatrix.Multiply(Volatile.TSMatrix@,Volatile.TSMatrix@,Volatile.TSMatrix@)">
            <summary>
            Multiply two matrices. Notice: matrix multiplication is not commutative.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <param name="result">The product of both matrices.</param>
        </member>
        <member name="M:Volatile.TSMatrix.Add(Volatile.TSMatrix,Volatile.TSMatrix)">
            <summary>
            Matrices are added.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>The sum of both matrices.</returns>
        </member>
        <member name="M:Volatile.TSMatrix.Add(Volatile.TSMatrix@,Volatile.TSMatrix@,Volatile.TSMatrix@)">
            <summary>
            Matrices are added.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <param name="result">The sum of both matrices.</param>
        </member>
        <member name="M:Volatile.TSMatrix.Inverse(Volatile.TSMatrix)">
            <summary>
            Calculates the inverse of a give matrix.
            </summary>
            <param name="matrix">The matrix to invert.</param>
            <returns>The inverted JMatrix.</returns>
        </member>
        <member name="M:Volatile.TSMatrix.Inverse(Volatile.TSMatrix@,Volatile.TSMatrix@)">
            <summary>
            Calculates the inverse of a give matrix.
            </summary>
            <param name="matrix">The matrix to invert.</param>
            <param name="result">The inverted JMatrix.</param>
        </member>
        <member name="M:Volatile.TSMatrix.Multiply(Volatile.TSMatrix,Volatile.FP)">
            <summary>
            Multiply a matrix by a scalefactor.
            </summary>
            <param name="matrix1">The matrix.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>A JMatrix multiplied by the scale factor.</returns>
        </member>
        <member name="M:Volatile.TSMatrix.Multiply(Volatile.TSMatrix@,Volatile.FP,Volatile.TSMatrix@)">
            <summary>
            Multiply a matrix by a scalefactor.
            </summary>
            <param name="matrix1">The matrix.</param>
            <param name="scaleFactor">The scale factor.</param>
            <param name="result">A JMatrix multiplied by the scale factor.</param>
        </member>
        <member name="M:Volatile.TSMatrix.CreateFromLookAt(Volatile.TSVector,Volatile.TSVector)">
            <summary>
            Creates a JMatrix representing an orientation from a quaternion.
            </summary>
            <param name="quaternion">The quaternion the matrix should be created from.</param>
            <returns>JMatrix representing an orientation.</returns>
        </member>
        <member name="M:Volatile.TSMatrix.CreateFromQuaternion(Volatile.TSQuaternion@,Volatile.TSMatrix@)">
            <summary>
            Creates a JMatrix representing an orientation from a quaternion.
            </summary>
            <param name="quaternion">The quaternion the matrix should be created from.</param>
            <param name="result">JMatrix representing an orientation.</param>
        </member>
        <member name="M:Volatile.TSMatrix.Transpose(Volatile.TSMatrix)">
            <summary>
            Creates the transposed matrix.
            </summary>
            <param name="matrix">The matrix which should be transposed.</param>
            <returns>The transposed JMatrix.</returns>
        </member>
        <member name="M:Volatile.TSMatrix.Transpose(Volatile.TSMatrix@,Volatile.TSMatrix@)">
            <summary>
            Creates the transposed matrix.
            </summary>
            <param name="matrix">The matrix which should be transposed.</param>
            <param name="result">The transposed JMatrix.</param>
        </member>
        <member name="M:Volatile.TSMatrix.op_Multiply(Volatile.TSMatrix,Volatile.TSMatrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="value1">The first matrix.</param>
            <param name="value2">The second matrix.</param>
            <returns>The product of both values.</returns>
        </member>
        <member name="M:Volatile.TSMatrix.op_Addition(Volatile.TSMatrix,Volatile.TSMatrix)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="value1">The first matrix.</param>
            <param name="value2">The second matrix.</param>
            <returns>The sum of both values.</returns>
        </member>
        <member name="M:Volatile.TSMatrix.op_Subtraction(Volatile.TSMatrix,Volatile.TSMatrix)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="value1">The first matrix.</param>
            <param name="value2">The second matrix.</param>
            <returns>The difference of both values.</returns>
        </member>
        <member name="M:Volatile.TSMatrix.CreateFromAxisAngle(Volatile.TSVector@,Volatile.FP,Volatile.TSMatrix@)">
            <summary>
            Creates a matrix which rotates around the given axis by the given angle.
            </summary>
            <param name="axis">The axis.</param>
            <param name="angle">The angle.</param>
            <param name="result">The resulting rotation matrix</param>
        </member>
        <member name="M:Volatile.TSMatrix.AngleAxis(Volatile.FP,Volatile.TSVector)">
            <summary>
            Creates a matrix which rotates around the given axis by the given angle.
            </summary>
            <param name="axis">The axis.</param>
            <param name="angle">The angle.</param>
            <returns>The resulting rotation matrix</returns>
        </member>
        <member name="T:Volatile.TSQuaternion">
            <summary>
            A Quaternion representing an orientation.
            </summary>
        </member>
        <member name="F:Volatile.TSQuaternion.x">
            <summary>The X component of the quaternion.</summary>
        </member>
        <member name="F:Volatile.TSQuaternion.y">
            <summary>The Y component of the quaternion.</summary>
        </member>
        <member name="F:Volatile.TSQuaternion.z">
            <summary>The Z component of the quaternion.</summary>
        </member>
        <member name="F:Volatile.TSQuaternion.w">
            <summary>The W component of the quaternion.</summary>
        </member>
        <member name="M:Volatile.TSQuaternion.#ctor(Volatile.FP,Volatile.FP,Volatile.FP,Volatile.FP)">
            <summary>
            Initializes a new instance of the JQuaternion structure.
            </summary>
            <param name="x">The X component of the quaternion.</param>
            <param name="y">The Y component of the quaternion.</param>
            <param name="z">The Z component of the quaternion.</param>
            <param name="w">The W component of the quaternion.</param>
        </member>
        <member name="M:Volatile.TSQuaternion.Add(Volatile.TSQuaternion,Volatile.TSQuaternion)">
            <summary>
            Quaternions are added.
            </summary>
            <param name="quaternion1">The first quaternion.</param>
            <param name="quaternion2">The second quaternion.</param>
            <returns>The sum of both quaternions.</returns>
        </member>
        <member name="M:Volatile.TSQuaternion.Add(Volatile.TSQuaternion@,Volatile.TSQuaternion@,Volatile.TSQuaternion@)">
            <summary>
            Quaternions are added.
            </summary>
            <param name="quaternion1">The first quaternion.</param>
            <param name="quaternion2">The second quaternion.</param>
            <param name="result">The sum of both quaternions.</param>
        </member>
        <member name="M:Volatile.TSQuaternion.Subtract(Volatile.TSQuaternion,Volatile.TSQuaternion)">
            <summary>
            Quaternions are subtracted.
            </summary>
            <param name="quaternion1">The first quaternion.</param>
            <param name="quaternion2">The second quaternion.</param>
            <returns>The difference of both quaternions.</returns>
        </member>
        <member name="M:Volatile.TSQuaternion.Subtract(Volatile.TSQuaternion@,Volatile.TSQuaternion@,Volatile.TSQuaternion@)">
            <summary>
            Quaternions are subtracted.
            </summary>
            <param name="quaternion1">The first quaternion.</param>
            <param name="quaternion2">The second quaternion.</param>
            <param name="result">The difference of both quaternions.</param>
        </member>
        <member name="M:Volatile.TSQuaternion.Multiply(Volatile.TSQuaternion,Volatile.TSQuaternion)">
            <summary>
            Multiply two quaternions.
            </summary>
            <param name="quaternion1">The first quaternion.</param>
            <param name="quaternion2">The second quaternion.</param>
            <returns>The product of both quaternions.</returns>
        </member>
        <member name="M:Volatile.TSQuaternion.Multiply(Volatile.TSQuaternion@,Volatile.TSQuaternion@,Volatile.TSQuaternion@)">
            <summary>
            Multiply two quaternions.
            </summary>
            <param name="quaternion1">The first quaternion.</param>
            <param name="quaternion2">The second quaternion.</param>
            <param name="result">The product of both quaternions.</param>
        </member>
        <member name="M:Volatile.TSQuaternion.Multiply(Volatile.TSQuaternion,Volatile.FP)">
            <summary>
            Scale a quaternion
            </summary>
            <param name="quaternion1">The quaternion to scale.</param>
            <param name="scaleFactor">Scale factor.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:Volatile.TSQuaternion.Multiply(Volatile.TSQuaternion@,Volatile.FP,Volatile.TSQuaternion@)">
            <summary>
            Scale a quaternion
            </summary>
            <param name="quaternion1">The quaternion to scale.</param>
            <param name="scaleFactor">Scale factor.</param>
            <param name="result">The scaled quaternion.</param>
        </member>
        <member name="M:Volatile.TSQuaternion.Normalize">
            <summary>
            Sets the length of the quaternion to one.
            </summary>
        </member>
        <member name="M:Volatile.TSQuaternion.CreateFromMatrix(Volatile.TSMatrix)">
            <summary>
            Creates a quaternion from a matrix.
            </summary>
            <param name="matrix">A matrix representing an orientation.</param>
            <returns>JQuaternion representing an orientation.</returns>
        </member>
        <member name="M:Volatile.TSQuaternion.CreateFromMatrix(Volatile.TSMatrix@,Volatile.TSQuaternion@)">
            <summary>
            Creates a quaternion from a matrix.
            </summary>
            <param name="matrix">A matrix representing an orientation.</param>
            <param name="result">JQuaternion representing an orientation.</param>
        </member>
        <member name="M:Volatile.TSQuaternion.op_Multiply(Volatile.TSQuaternion,Volatile.TSQuaternion)">
            <summary>
            Multiply two quaternions.
            </summary>
            <param name="value1">The first quaternion.</param>
            <param name="value2">The second quaternion.</param>
            <returns>The product of both quaternions.</returns>
        </member>
        <member name="M:Volatile.TSQuaternion.op_Addition(Volatile.TSQuaternion,Volatile.TSQuaternion)">
            <summary>
            Add two quaternions.
            </summary>
            <param name="value1">The first quaternion.</param>
            <param name="value2">The second quaternion.</param>
            <returns>The sum of both quaternions.</returns>
        </member>
        <member name="M:Volatile.TSQuaternion.op_Subtraction(Volatile.TSQuaternion,Volatile.TSQuaternion)">
            <summary>
            Subtract two quaternions.
            </summary>
            <param name="value1">The first quaternion.</param>
            <param name="value2">The second quaternion.</param>
            <returns>The difference of both quaternions.</returns>
        </member>
        <member name="M:Volatile.TSQuaternion.op_Multiply(Volatile.TSQuaternion,Volatile.TSVector)">
              @brief Rotates a {@link TSVector} by the {@link TSQuanternion}.
            
        </member>
        <member name="T:Volatile.TSRandom">
              @brief Generates random numbers based on a deterministic approach.
            
        </member>
        <member name="F:Volatile.TSRandom.instance">
              @brief Static instance of {@link TSRandom} with seed 1.
            
        </member>
        <member name="M:Volatile.TSRandom.New(System.Int32)">
              @brief Generates a new instance based on a given seed.
            
        </member>
        <member name="M:Volatile.TSRandom.Next">
              @brief Returns a random integer.
            
        </member>
        <member name="M:Volatile.TSRandom.CallNext">
              @brief Returns a random integer.
            
        </member>
        <member name="M:Volatile.TSRandom.Next(System.Int32,System.Int32)">
              @brief Returns a integer between a min value [inclusive] and a max value [exclusive].
            
        </member>
        <member name="M:Volatile.TSRandom.Next(Volatile.FP,Volatile.FP)">
              @brief Returns a {@link FP} between a min value [inclusive] and a max value [inclusive].
            
        </member>
        <member name="M:Volatile.TSRandom.Range(System.Int32,System.Int32)">
              @brief Returns a integer between a min value [inclusive] and a max value [exclusive].
            
        </member>
        <member name="M:Volatile.TSRandom.Range(Volatile.FP,Volatile.FP)">
              @brief Returns a {@link FP} between a min value [inclusive] and a max value [inclusive].
            
        </member>
        <member name="M:Volatile.TSRandom.NextFP">
              @brief Returns a {@link FP} between 0.0 [inclusive] and 1.0 [inclusive].
            
        </member>
        <member name="P:Volatile.TSRandom.value">
              @brief Returns a {@link FP} between 0.0 [inclusive] and 1.0 [inclusive].
            
        </member>
        <member name="P:Volatile.TSRandom.insideUnitSphere">
              @brief Returns a random {@link TSVector} representing a point inside a sphere with radius 1.
            
        </member>
        <member name="T:Volatile.TSVector">
            <summary>
            A vector structure.
            </summary>
        </member>
        <member name="F:Volatile.TSVector.x">
            <summary>The X component of the vector.</summary>
        </member>
        <member name="F:Volatile.TSVector.y">
            <summary>The Y component of the vector.</summary>
        </member>
        <member name="F:Volatile.TSVector.z">
            <summary>The Z component of the vector.</summary>
        </member>
        <member name="F:Volatile.TSVector.zero">
            <summary>
            A vector with components (0,0,0);
            </summary>
        </member>
        <member name="F:Volatile.TSVector.left">
            <summary>
            A vector with components (-1,0,0);
            </summary>
        </member>
        <member name="F:Volatile.TSVector.right">
            <summary>
            A vector with components (1,0,0);
            </summary>
        </member>
        <member name="F:Volatile.TSVector.up">
            <summary>
            A vector with components (0,1,0);
            </summary>
        </member>
        <member name="F:Volatile.TSVector.down">
            <summary>
            A vector with components (0,-1,0);
            </summary>
        </member>
        <member name="F:Volatile.TSVector.back">
            <summary>
            A vector with components (0,0,-1);
            </summary>
        </member>
        <member name="F:Volatile.TSVector.forward">
            <summary>
            A vector with components (0,0,1);
            </summary>
        </member>
        <member name="F:Volatile.TSVector.one">
            <summary>
            A vector with components (1,1,1);
            </summary>
        </member>
        <member name="F:Volatile.TSVector.MinValue">
            <summary>
            A vector with components 
            (FP.MinValue,FP.MinValue,FP.MinValue);
            </summary>
        </member>
        <member name="F:Volatile.TSVector.MaxValue">
            <summary>
            A vector with components 
            (FP.MaxValue,FP.MaxValue,FP.MaxValue);
            </summary>
        </member>
        <member name="P:Volatile.TSVector.sqrMagnitude">
            <summary>
            Gets the squared length of the vector.
            </summary>
            <returns>Returns the squared length of the vector.</returns>
        </member>
        <member name="P:Volatile.TSVector.magnitude">
            <summary>
            Gets the length of the vector.
            </summary>
            <returns>Returns the length of the vector.</returns>
        </member>
        <member name="P:Volatile.TSVector.normalized">
            <summary>
            Gets a normalized version of the vector.
            </summary>
            <returns>Returns a normalized version of the vector.</returns>
        </member>
        <member name="M:Volatile.TSVector.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor initializing a new instance of the structure
            </summary>
            <param name="x">The X component of the vector.</param>
            <param name="y">The Y component of the vector.</param>
            <param name="z">The Z component of the vector.</param>
        </member>
        <member name="M:Volatile.TSVector.Scale(Volatile.TSVector)">
            <summary>
            Multiplies each component of the vector by the same components of the provided vector.
            </summary>
        </member>
        <member name="M:Volatile.TSVector.Set(Volatile.FP,Volatile.FP,Volatile.FP)">
            <summary>
            Sets all vector component to specific values.
            </summary>
            <param name="x">The X component of the vector.</param>
            <param name="y">The Y component of the vector.</param>
            <param name="z">The Z component of the vector.</param>
        </member>
        <member name="M:Volatile.TSVector.#ctor(Volatile.FP)">
            <summary>
            Constructor initializing a new instance of the structure
            </summary>
            <param name="xyz">All components of the vector are set to xyz</param>
        </member>
        <member name="M:Volatile.TSVector.ToString">
            <summary>
            Builds a string from the JVector.
            </summary>
            <returns>A string containing all three components.</returns>
        </member>
        <member name="M:Volatile.TSVector.Equals(System.Object)">
            <summary>
            Tests if an object is equal to this vector.
            </summary>
            <param name="obj">The object to test.</param>
            <returns>Returns true if they are euqal, otherwise false.</returns>
        </member>
        <member name="M:Volatile.TSVector.Scale(Volatile.TSVector,Volatile.TSVector)">
            <summary>
            Multiplies each component of the vector by the same components of the provided vector.
            </summary>
        </member>
        <member name="M:Volatile.TSVector.op_Equality(Volatile.TSVector,Volatile.TSVector)">
            <summary>
            Tests if two JVector are equal.
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>Returns true if both values are equal, otherwise false.</returns>
        </member>
        <member name="M:Volatile.TSVector.op_Inequality(Volatile.TSVector,Volatile.TSVector)">
            <summary>
            Tests if two JVector are not equal.
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>Returns false if both values are equal, otherwise true.</returns>
        </member>
        <member name="M:Volatile.TSVector.Min(Volatile.TSVector,Volatile.TSVector)">
            <summary>
            Gets a vector with the minimum x,y and z values of both vectors.
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>A vector with the minimum x,y and z values of both vectors.</returns>
        </member>
        <member name="M:Volatile.TSVector.Min(Volatile.TSVector@,Volatile.TSVector@,Volatile.TSVector@)">
            <summary>
            Gets a vector with the minimum x,y and z values of both vectors.
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="result">A vector with the minimum x,y and z values of both vectors.</param>
        </member>
        <member name="M:Volatile.TSVector.Max(Volatile.TSVector,Volatile.TSVector)">
            <summary>
            Gets a vector with the maximum x,y and z values of both vectors.
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>A vector with the maximum x,y and z values of both vectors.</returns>
        </member>
        <member name="M:Volatile.TSVector.Max(Volatile.TSVector@,Volatile.TSVector@,Volatile.TSVector@)">
            <summary>
            Gets a vector with the maximum x,y and z values of both vectors.
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="result">A vector with the maximum x,y and z values of both vectors.</param>
        </member>
        <member name="M:Volatile.TSVector.MakeZero">
            <summary>
            Sets the length of the vector to zero.
            </summary>
        </member>
        <member name="M:Volatile.TSVector.IsZero">
            <summary>
            Checks if the length of the vector is zero.
            </summary>
            <returns>Returns true if the vector is zero, otherwise false.</returns>
        </member>
        <member name="M:Volatile.TSVector.IsNearlyZero">
            <summary>
            Checks if the length of the vector is nearly zero.
            </summary>
            <returns>Returns true if the vector is nearly zero, otherwise false.</returns>
        </member>
        <member name="M:Volatile.TSVector.Transform(Volatile.TSVector,Volatile.TSMatrix)">
            <summary>
            Transforms a vector by the given matrix.
            </summary>
            <param name="position">The vector to transform.</param>
            <param name="matrix">The transform matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Volatile.TSVector.Transform(Volatile.TSVector@,Volatile.TSMatrix@,Volatile.TSVector@)">
            <summary>
            Transforms a vector by the given matrix.
            </summary>
            <param name="position">The vector to transform.</param>
            <param name="matrix">The transform matrix.</param>
            <param name="result">The transformed vector.</param>
        </member>
        <member name="M:Volatile.TSVector.TransposedTransform(Volatile.TSVector@,Volatile.TSMatrix@,Volatile.TSVector@)">
            <summary>
            Transforms a vector by the transposed of the given Matrix.
            </summary>
            <param name="position">The vector to transform.</param>
            <param name="matrix">The transform matrix.</param>
            <param name="result">The transformed vector.</param>
        </member>
        <member name="M:Volatile.TSVector.Dot(Volatile.TSVector,Volatile.TSVector)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>Returns the dot product of both vectors.</returns>
        </member>
        <member name="M:Volatile.TSVector.Dot(Volatile.TSVector@,Volatile.TSVector@)">
            <summary>
            Calculates the dot product of both vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>Returns the dot product of both vectors.</returns>
        </member>
        <member name="M:Volatile.TSVector.Add(Volatile.TSVector,Volatile.TSVector)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The sum of both vectors.</returns>
        </member>
        <member name="M:Volatile.TSVector.Add(Volatile.TSVector@,Volatile.TSVector@,Volatile.TSVector@)">
            <summary>
            Adds to vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The sum of both vectors.</param>
        </member>
        <member name="M:Volatile.TSVector.Divide(Volatile.TSVector,Volatile.FP)">
            <summary>
            Divides a vector by a factor.
            </summary>
            <param name="value1">The vector to divide.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>Returns the scaled vector.</returns>
        </member>
        <member name="M:Volatile.TSVector.Divide(Volatile.TSVector@,Volatile.FP,Volatile.TSVector@)">
            <summary>
            Divides a vector by a factor.
            </summary>
            <param name="value1">The vector to divide.</param>
            <param name="scaleFactor">The scale factor.</param>
            <param name="result">Returns the scaled vector.</param>
        </member>
        <member name="M:Volatile.TSVector.Subtract(Volatile.TSVector,Volatile.TSVector)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The difference of both vectors.</returns>
        </member>
        <member name="M:Volatile.TSVector.Subtract(Volatile.TSVector@,Volatile.TSVector@,Volatile.TSVector@)">
            <summary>
            Subtracts to vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The difference of both vectors.</param>
        </member>
        <member name="M:Volatile.TSVector.Cross(Volatile.TSVector,Volatile.TSVector)">
            <summary>
            The cross product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The cross product of both vectors.</returns>
        </member>
        <member name="M:Volatile.TSVector.Cross(Volatile.TSVector@,Volatile.TSVector@,Volatile.TSVector@)">
            <summary>
            The cross product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <param name="result">The cross product of both vectors.</param>
        </member>
        <member name="M:Volatile.TSVector.GetHashCode">
            <summary>
            Gets the hashcode of the vector.
            </summary>
            <returns>Returns the hashcode of the vector.</returns>
        </member>
        <member name="M:Volatile.TSVector.Negate">
            <summary>
            Inverses the direction of the vector.
            </summary>
        </member>
        <member name="M:Volatile.TSVector.Negate(Volatile.TSVector)">
            <summary>
            Inverses the direction of a vector.
            </summary>
            <param name="value">The vector to inverse.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:Volatile.TSVector.Negate(Volatile.TSVector@,Volatile.TSVector@)">
            <summary>
            Inverses the direction of a vector.
            </summary>
            <param name="value">The vector to inverse.</param>
            <param name="result">The negated vector.</param>
        </member>
        <member name="M:Volatile.TSVector.Normalize(Volatile.TSVector)">
            <summary>
            Normalizes the given vector.
            </summary>
            <param name="value">The vector which should be normalized.</param>
            <returns>A normalized vector.</returns>
        </member>
        <member name="M:Volatile.TSVector.Normalize">
            <summary>
            Normalizes this vector.
            </summary>
        </member>
        <member name="M:Volatile.TSVector.Normalize(Volatile.TSVector@,Volatile.TSVector@)">
            <summary>
            Normalizes the given vector.
            </summary>
            <param name="value">The vector which should be normalized.</param>
            <param name="result">A normalized vector.</param>
        </member>
        <member name="M:Volatile.TSVector.Swap(Volatile.TSVector@,Volatile.TSVector@)">
            <summary>
            Swaps the components of both vectors.
            </summary>
            <param name="vector1">The first vector to swap with the second.</param>
            <param name="vector2">The second vector to swap with the first.</param>
        </member>
        <member name="M:Volatile.TSVector.Multiply(Volatile.TSVector,Volatile.FP)">
            <summary>
            Multiply a vector with a factor.
            </summary>
            <param name="value1">The vector to multiply.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>Returns the multiplied vector.</returns>
        </member>
        <member name="M:Volatile.TSVector.Multiply(Volatile.TSVector@,Volatile.FP,Volatile.TSVector@)">
            <summary>
            Multiply a vector with a factor.
            </summary>
            <param name="value1">The vector to multiply.</param>
            <param name="scaleFactor">The scale factor.</param>
            <param name="result">Returns the multiplied vector.</param>
        </member>
        <member name="M:Volatile.TSVector.op_Modulus(Volatile.TSVector,Volatile.TSVector)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>Returns the cross product of both.</returns>
        </member>
        <member name="M:Volatile.TSVector.op_Multiply(Volatile.TSVector,Volatile.TSVector)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>Returns the dot product of both.</returns>
        </member>
        <member name="M:Volatile.TSVector.op_Multiply(Volatile.TSVector,Volatile.FP)">
            <summary>
            Multiplies a vector by a scale factor.
            </summary>
            <param name="value1">The vector to scale.</param>
            <param name="value2">The scale factor.</param>
            <returns>Returns the scaled vector.</returns>
        </member>
        <member name="M:Volatile.TSVector.op_Multiply(Volatile.FP,Volatile.TSVector)">
            <summary>
            Multiplies a vector by a scale factor.
            </summary>
            <param name="value2">The vector to scale.</param>
            <param name="value1">The scale factor.</param>
            <returns>Returns the scaled vector.</returns>
        </member>
        <member name="M:Volatile.TSVector.op_Subtraction(Volatile.TSVector,Volatile.TSVector)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The difference of both vectors.</returns>
        </member>
        <member name="M:Volatile.TSVector.op_Addition(Volatile.TSVector,Volatile.TSVector)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The sum of both vectors.</returns>
        </member>
        <member name="M:Volatile.TSVector.op_Division(Volatile.TSVector,Volatile.FP)">
            <summary>
            Divides a vector by a factor.
            </summary>
            <param name="value1">The vector to divide.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>Returns the scaled vector.</returns>
        </member>
        <member name="M:Volatile.TSVector2.#ctor(Volatile.FP,Volatile.FP)">
            <summary>
            Constructor foe standard 2D vector.
            </summary>
            <param name="x">
            A <see cref="T:System.Single"/>
            </param>
            <param name="y">
            A <see cref="T:System.Single"/>
            </param>
        </member>
        <member name="M:Volatile.TSVector2.#ctor(Volatile.FP)">
            <summary>
            Constructor for "square" vector.
            </summary>
            <param name="value">
            A <see cref="T:System.Single"/>
            </param>
        </member>
        <member name="M:Volatile.TSVector2.Distance(Volatile.TSVector2,Volatile.TSVector2)">
            <summary>
            Returns FP precison distanve between two vectors
            </summary>
            <param name="value1">
            A <see cref="T:Volatile.TSVector2"/>
            </param>
            <param name="value2">
            A <see cref="T:Volatile.TSVector2"/>
            </param>
            <returns>
            A <see cref="T:System.Single"/>
            </returns>
        </member>
        <member name="M:Volatile.TSVector2.Divide(Volatile.TSVector2,Volatile.TSVector2)">
            <summary>
            Devide first vector with the secund vector
            </summary>
            <param name="value1">
            A <see cref="T:Volatile.TSVector2"/>
            </param>
            <param name="value2">
            A <see cref="T:Volatile.TSVector2"/>
            </param>
            <returns>
            A <see cref="T:Volatile.TSVector2"/>
            </returns>
        </member>
        <member name="M:Volatile.VoltWorld.GetOccludingDistance(Volatile.VoltRayCast,System.Int32)">
            <summary>
            Gets the distance to the closest occluder for the given ray.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.TestTargets(Volatile.VoltRayCast,Volatile.VoltExplosionCallback,System.Int32,Volatile.FP,Volatile.FP)">
            <summary>
            Tests all valid explosion targets for a given ray.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.PopulateFiltered(Volatile.TSVector2,Volatile.FP,Volatile.VoltBodyFilter,System.Int32,Volatile.VoltBuffer{Volatile.VoltBody}@)">
            <summary>
            Finds all dynamic bodies that overlap with the explosion AABB
            and pass the target filter test. Does not test actual shapes.
            </summary>
        </member>
        <member name="P:Volatile.VoltWorld.DeltaTime">
            <summary>
            Fixed update delta time for body integration. 
            Defaults to Config.DEFAULT_DELTA_TIME.
            </summary>
        </member>
        <member name="P:Volatile.VoltWorld.IterationCount">
            <summary>
            Number of iterations when updating the world.
            Defaults to Config.DEFAULT_ITERATION_COUNT.
            </summary>
        </member>
        <member name="P:Volatile.VoltWorld.HistoryLength">
            <summary>
            How many frames of history this world is recording.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.CreatePolygonWorldSpace(Volatile.TSVector2[],System.Nullable{Volatile.FP},System.Nullable{Volatile.FP},System.Nullable{Volatile.FP})">
            <summary>
            Creates a new polygon shape from world-space vertices.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.CreatePolygonBodySpace(Volatile.TSVector2[],System.Nullable{Volatile.FP},System.Nullable{Volatile.FP},System.Nullable{Volatile.FP})">
            <summary>
            Creates a new polygon shape from body-space vertices.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.CreateCircleWorldSpace(Volatile.TSVector2,Volatile.FP,System.Nullable{Volatile.FP},System.Nullable{Volatile.FP},System.Nullable{Volatile.FP})">
            <summary>
            Creates a new circle shape from a world-space origin.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.CreateStaticBody(Volatile.TSVector2,Volatile.FP,Volatile.VoltShape[])">
            <summary>
            Creates a new static body and adds it to the world.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.CreateDynamicBody(Volatile.TSVector2,Volatile.FP,Volatile.VoltShape[])">
            <summary>
            Creates a new dynamic body and adds it to the world.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.AddBody(Volatile.VoltBody,Volatile.TSVector2,Volatile.FP)">
            <summary>
            Adds a body to the world. Used for reintroducing bodies that 
            have been removed. For new bodies, use CreateBody.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.RemoveBody(Volatile.VoltBody)">
            <summary>
            Removes a body from the world. The body will be partially reset so it
            can be added later. The pointer is still valid and the body can be
            returned to the world using AddBody.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.DestroyBody(Volatile.VoltBody)">
            <summary>
            Removes a body from the world and deallocates it. The pointer is
            invalid after this point.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.Update">
            <summary>
            Ticks the world, updating all dynamic bodies and resolving collisions.
            If a frame number is provided, all dynamic bodies will store their
            state for that frame for later testing.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.Update(Volatile.VoltBody,System.Boolean)">
            <summary>
            Updates a single body, resolving only collisions with that body.
            If a frame number is provided, all dynamic bodies will store their
            state for that frame for later testing.
            
            Note: This function is best used with dynamic collisions disabled, 
            otherwise you might get symmetric duplicates on collisions.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.QueryPoint(Volatile.TSVector2,Volatile.VoltBodyFilter,System.Int32)">
            <summary>
            Finds all bodies containing a given point.
            
            Subsequent calls to other Query functions (Point, Circle, Bounds) will
            invalidate the resulting enumeration from this function.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.QueryCircle(Volatile.TSVector2,Volatile.FP,Volatile.VoltBodyFilter,System.Int32)">
            <summary>
            Finds all bodies intersecting with a given circle.
            
            Subsequent calls to other Query functions (Point, Circle, Bounds) will
            invalidate the resulting enumeration from this function.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.RayCast(Volatile.VoltRayCast@,Volatile.VoltRayResult@,Volatile.VoltBodyFilter,System.Int32)">
            <summary>
            Performs a raycast on all world bodies.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.CircleCast(Volatile.VoltRayCast@,Volatile.FP,Volatile.VoltRayResult@,Volatile.VoltBodyFilter,System.Int32)">
            <summary>
            Performs a circle cast on all world bodies.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.BroadPhase">
            <summary>
            Identifies collisions for all bodies, ignoring symmetrical duplicates.
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.BroadPhase(Volatile.VoltBody,System.Boolean)">
            <summary>
            Identifies collisions for a single body. Does not keep track of 
            symmetrical duplicates (they could be counted twice).
            </summary>
        </member>
        <member name="M:Volatile.VoltWorld.NarrowPhase(Volatile.VoltShape,Volatile.VoltShape)">
            <summary>
            Creates a manifold for two shapes if they collide.
            </summary>
        </member>
        <member name="T:Volatile.Axis">
             <summary>
             The Axis data structure represents a "slab" between the given edge and
             a parallel edge drawn at the origin. The "width" value gives the width
             of that axis slab, defined as follows: For an edge AB with normal N, 
             this width w is given by Dot(A, N). If you take edge AB, and draw an 
             edge CD parallel to AB that intersects the origin, the width w is equal
             to the minimum distance between edges AB and CD.
            
                         |
                         |     C
                         |    /
                         |   /           A
                         |  /ヽ         /
                         | /   ヽ      /
                         |/    w ヽ   /
              -----------+---------ヽ/----
                        /|          /
                       D |         /
                         |        /
                         |       B
                         |
                         
             </summary>
        </member>
        <member name="T:Volatile.TreeBroadphase">
             <summary>
             A dynamic tree bounding volume hierarchy used for collision detection.
             Does not support raycasts (for now) as they would not be compatible with
             Volatile's historical raycast capability -- no past-step data is preserved
             in this tree.
             
             Bounding AABBs are expanded to allow for movement room according to
             the VoltConfig.AABB_EXTENSION setting.
            
             Nodes are pooled and relocatable, so we use node indices rather than pointers.
             </summary>
        </member>
        <member name="T:Volatile.TreeBroadphase.Node">
            <summary>
            A node in the dynamic tree.
            </summary>
        </member>
        <member name="F:Volatile.TreeBroadphase.Node.aabb">
            <summary>
            Expanded AABB.
            </summary>
        </member>
        <member name="P:Volatile.TreeBroadphase.Height">
            <summary>
            Compute the height of the binary tree in O(N) time.
            Should not be called often.
            </summary>
        </member>
        <member name="P:Volatile.TreeBroadphase.AreaRatio">
            <summary>
            Get the ratio of the sum of the node areas to the root area.
            </summary>
        </member>
        <member name="P:Volatile.TreeBroadphase.MaxBalance">
            <summary>
            Get the maximum balance of an node in the tree. The balance is the
            difference in height of the two children of a node.
            </summary>
        </member>
        <member name="M:Volatile.TreeBroadphase.ComputeHeight">
            <summary>
            Compute the height of the entire tree.
            </summary>
        </member>
        <member name="M:Volatile.TreeBroadphase.AddBody(Volatile.VoltBody)">
            <summary>
            Adds a body to the tree.     
            </summary>
        </member>
        <member name="M:Volatile.TreeBroadphase.RemoveBody(Volatile.VoltBody)">
            <summary>
            Removes a body from the tree.
            </summary>
        </member>
        <member name="M:Volatile.TreeBroadphase.UpdateBody(Volatile.VoltBody)">
            <summary>
            Updates a body's position. If the body has moved outside of its
            expanded AABB, then the body is removed from the tree and re-inserted.
            Otherwise the function returns immediately.
            </summary>
        </member>
        <member name="M:Volatile.TreeBroadphase.ExpandChild(System.Int32,Volatile.VoltBuffer{Volatile.VoltBody})">
            <summary>
            If the node is a leaf, we do not test the actual proxy bounding box.
            This is redundant since we will be testing the body's bounding box in
            the first step of the narrowphase, and the two are almost equivalent.
            </summary>
        </member>
        <member name="M:Volatile.TreeBroadphase.Balance(System.Int32)">
            <summary>
            Perform a left or right rotation if node A is imbalanced.
            </summary>
        </member>
        <member name="M:Volatile.TreeBroadphase.ComputeHeight(System.Int32)">
            <summary>
            Compute the height of a sub-tree.
            </summary>
        </member>
        <member name="T:Volatile.CheapList`1">
            <summary>
            A very loose partial encapsulation of a list array. Supports fast item
            at end, and fast arbitrary element removal. Does not guarantee order.
            </summary>
        </member>
        <member name="M:Volatile.CheapList`1.Add(`0)">
            <summary>
            Adds a new element to the end of the list. Returns the index of the
            newly-indexed object.
            </summary>
        </member>
        <member name="M:Volatile.CheapList`1.Remove(`0)">
            <summary>
            Removes the element by swapping it for the last element in the list.
            </summary>
        </member>
        <member name="M:Volatile.Collision.TestPointCircleSimple(Volatile.TSVector2,Volatile.TSVector2,Volatile.FP)">
            <summary>
            Simple check for point-circle containment.
            </summary>
        </member>
        <member name="M:Volatile.Collision.TestCircleCircleSimple(Volatile.TSVector2,Volatile.TSVector2,Volatile.FP,Volatile.FP)">
            <summary>
            Simple check for two overlapping circles.
            </summary>
        </member>
        <member name="M:Volatile.Collision.CircleRayCast(Volatile.VoltShape,Volatile.TSVector2,Volatile.FP,Volatile.VoltRayCast@,Volatile.VoltRayResult@)">
            <summary>
            Checks a ray against a circle with a given origin and square radius.
            </summary>
        </member>
        <member name="M:Volatile.Collision.FindAxisShortestDistance(Volatile.TSVector2,Volatile.Axis[],Volatile.FP@)">
            <summary>
            Returns the index of the nearest axis on the poly to a point.
            Outputs the minimum distance between the axis and the point.
            </summary>
        </member>
        <member name="M:Volatile.Collision.FindAxisMaxPenetration(Volatile.TSVector2,Volatile.FP,Volatile.VoltPolygon,Volatile.FP@)">
            <summary>
            Returns the index of the axis with the max circle penetration depth.
            Breaks out if a separating axis is found between the two shapes.
            Outputs the penetration depth of the circle in the axis (if any).
            </summary>
        </member>
        <member name="M:Volatile.Collision.TestCircles(Volatile.VoltWorld,Volatile.VoltCircle,Volatile.VoltShape,Volatile.TSVector2,Volatile.FP)">
            <summary>
            Workhorse for circle-circle collisions, compares origin distance
            to the sum of the two circles' radii, returns a Manifold.
            </summary>
            
        </member>
        <member name="M:Volatile.Collision.FindVerts(Volatile.VoltPolygon,Volatile.VoltPolygon,Volatile.TSVector2,Volatile.FP,Volatile.Manifold)">
            <summary>
            Add contacts for penetrating vertices. Note that this does not handle
            cases where an overlap was detected, but no vertices fall inside the
            opposing polygon (like a Star of David). For this we have a fallback.
            
            See http://chipmunk-physics.googlecode.com/svn/trunk/src/cpCollision.c
            </summary>
        </member>
        <member name="M:Volatile.Collision.FindVertsFallback(Volatile.VoltPolygon,Volatile.VoltPolygon,Volatile.TSVector2,Volatile.FP,Volatile.Manifold)">
            <summary>
            A fallback for handling degenerate "Star of David" cases.
            </summary>
        </member>
        <member name="M:Volatile.HistoryBuffer.Store(Volatile.HistoryRecord)">
            <summary>
            Stores a value as latest.
            </summary>
        </member>
        <member name="M:Volatile.HistoryBuffer.TryGet(System.Int32,Volatile.HistoryRecord@)">
            <summary>
            Tries to get a value with a given number of frames behind the last 
            value stored. If the value can't be found, this function will find
            the closest and return false, indicating a clamp.
            </summary>
        </member>
        <member name="M:Volatile.HistoryBuffer.GetValues">
            <summary>
            Returns all values, but not in order.
            </summary>
        </member>
        <member name="T:Volatile.HistoryRecord">
            <summary>
            A stored historical image of a past body state, used for historical
            queries and raycasts. Rather than actually rolling the body back to
            its old position (expensive), we transform the ray into the body's
            local space based on the body's old position/axis. Then all casts
            on shapes use the local-space ray (this applies both for current-
            time and past-time raycasts and point queries).
            </summary>
        </member>
        <member name="T:Volatile.VoltRayCast">
            <summary>
            A semi-precomputed ray optimized for fast AABB tests.
            </summary>
        </member>
        <member name="M:Volatile.VoltPolygon.GetEdge(System.Int32,Volatile.TSVector2@,Volatile.TSVector2@)">
            <summary>
            Gets the vertices defining an edge of the polygon.
            </summary>
        </member>
        <member name="M:Volatile.VoltPolygon.GetWorldAxis(System.Int32)">
            <summary>
            Returns the axis at the given index.
            </summary>
        </member>
        <member name="M:Volatile.VoltPolygon.ContainsPoint(Volatile.TSVector2)">
            <summary>
            A world-space point query, used as a shortcut in collision tests.
            </summary>
        </member>
        <member name="M:Volatile.VoltPolygon.ContainsPointPartial(Volatile.TSVector2,Volatile.TSVector2)">
            <summary>
            Special case that ignores axes pointing away from the normal.
            </summary>
        </member>
        <member name="M:Volatile.VoltAABB.RayCast(Volatile.VoltRayCast@,Volatile.FP,Volatile.FP,Volatile.FP,Volatile.FP)">
            <summary>
            A cheap ray test that requires some precomputed information.
            Adapted from: http://www.cs.utah.edu/~awilliam/box/box.pdf
            </summary>
        </member>
        <member name="M:Volatile.VoltAABB.QueryPoint(Volatile.TSVector2)">
            <summary>
            Performs a point test on the AABB.
            </summary>
        </member>
        <member name="M:Volatile.VoltAABB.QueryCircleApprox(Volatile.TSVector2,Volatile.FP)">
            <summary>
            Note: This doesn't take rounded edges into account.
            </summary>
        </member>
        <member name="M:Volatile.VoltAABB.CircleCastApprox(Volatile.VoltRayCast@,Volatile.FP)">
            <summary>
            Note: This doesn't take rounded edges into account.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.DisallowDynamic(Volatile.VoltBody,Volatile.VoltBody)">
            <summary>
            A predefined filter that disallows collisions between dynamic bodies.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.TryGetSpace(System.Int32,Volatile.TSVector2@,Volatile.TSVector2@)">
            <summary>
            Tries to get a reference frame for a given number of ticks behind 
            the current tick. Returns true if a value was found, false if a
            value was not found (in which case we clamp to the nearest).
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.AssignHistory(Volatile.HistoryBuffer)">
            <summary>
            Initializes the buffer for storing past body states/spaces.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.StoreState">
            <summary>
            Stores a snapshot of this body's current state/space to a tick.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.GetState(System.Int32)">
            <summary>
            Retrieves a snapshot of the body's state/space at a tick.
            Logs an error and defaults to the current state if it can't be found.
            </summary>
        </member>
        <member name="P:Volatile.VoltBody.IsStatic">
            <summary>
            Static objects are considered to have infinite mass and cannot move.
            </summary>
        </member>
        <member name="P:Volatile.VoltBody.IsInWorld">
            <summary>
            If we're doing historical queries or tests, the body may have since
            been removed from the world.
            </summary>
        </member>
        <member name="P:Volatile.VoltBody.UserData">
            <summary>
            For attaching arbitrary data to this body.
            </summary>
        </member>
        <member name="P:Volatile.VoltBody.Angle">
            <summary>
            Current angle in radians.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.QueryAABBOnly(Volatile.VoltAABB,System.Int32)">
            <summary>
            Checks if an AABB overlaps with our AABB.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.QueryPoint(Volatile.TSVector2,System.Int32,System.Boolean)">
            <summary>
            Checks if a point is contained in this body. 
            Begins with AABB checks unless bypassed.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.QueryCircle(Volatile.TSVector2,Volatile.FP,System.Int32,System.Boolean)">
            <summary>
            Checks if a circle overlaps with this body. 
            Begins with AABB checks.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.RayCast(Volatile.VoltRayCast@,Volatile.VoltRayResult@,System.Int32,System.Boolean)">
            <summary>
            Performs a ray cast check on this body. 
            Begins with AABB checks.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.CircleCast(Volatile.VoltRayCast@,Volatile.FP,Volatile.VoltRayResult@,System.Int32,System.Boolean)">
            <summary>
            Performs a circle cast check on this body. 
            Begins with AABB checks.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.PartialReset">
            <summary>
            Used for saving the body as part of another structure. The body
            will retain all geometry data and associated metrics, but its
            position, velocity, forces, and all related history will be cleared.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.Reset">
            <summary>
            Full reset. Clears out all data for pooling. Call FreeShapes() first.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.OnPositionUpdated">
            <summary>
            Applies the current position and angle to shapes and the AABB.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.UpdateAABB">
            <summary>
            Builds the AABB by combining all the shape AABBs.
            </summary>
        </member>
        <member name="M:Volatile.VoltBody.Integrate">
            <summary>
            Computes forces and dynamics and applies them to position and angle.
            </summary>
        </member>
        <member name="M:Volatile.VoltBuffer`1.Add(`0)">
            <summary>
            Adds a new element to the end of the list. Returns the index of the
            newly-indexed object.
            </summary>
        </member>
        <member name="P:Volatile.VoltShape.UserData">
            <summary>
            For attaching arbitrary data to this shape.
            </summary>
        </member>
        <member name="P:Volatile.VoltShape.AABB">
            <summary>
            The world-space bounding AABB for this shape.
            </summary>
        </member>
        <member name="P:Volatile.VoltShape.Area">
            <summary>
            Total area of the shape.
            </summary>
        </member>
        <member name="P:Volatile.VoltShape.Mass">
            <summary>
            Total mass of the shape (area * density).
            </summary>
        </member>
        <member name="P:Volatile.VoltShape.Inertia">
            <summary>
            Total inertia of the shape relative to the body's origin.
            </summary>
        </member>
        <member name="M:Volatile.VoltShape.QueryPoint(Volatile.TSVector2)">
            <summary>
            Checks if a point is contained in this shape. 
            Begins with an AABB check.
            </summary>
        </member>
        <member name="M:Volatile.VoltShape.QueryCircle(Volatile.TSVector2,Volatile.FP)">
            <summary>
            Checks if a circle overlaps with this shape. 
            Begins with an AABB check.
            </summary>
        </member>
        <member name="M:Volatile.VoltShape.RayCast(Volatile.VoltRayCast@,Volatile.VoltRayResult@)">
            <summary>
            Performs a raycast check on this shape. 
            Begins with an AABB check.
            </summary>
        </member>
        <member name="M:Volatile.VoltShape.CircleCast(Volatile.VoltRayCast@,Volatile.FP,Volatile.VoltRayResult@)">
            <summary>
            Performs a circlecast check on this shape. 
            Begins with an AABB check.
            </summary>
        </member>
    </members>
</doc>
